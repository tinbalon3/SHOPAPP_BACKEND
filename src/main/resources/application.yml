server:
  port: 8088

cloud:
  aws:
    credentials:
      access-key: AKIAQLSIVZXOK4QIEDFE
      secret-key: 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
    region:
      static: ap-southeast-2
    stack:
      auto: false

application:
  bucket:
    name: shopappimages
#google:
#  app:
#    id: 368175433889-feredabg3d7orcvdokr6nsm841fpv9ro.apps.googleusercontent.com
#    secret: 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
#  redirect:
#    uri: http://localhost:4200/auth/callback/google
#  link:
#    get:
#      token: https://accounts.google.com/o/oauth2/token
#      user_info: https://www.googleapis.com/oauth2/v1/userinfo?access_token=
spring:
  profiles:
    active: default
  application:
    name: gateway

    cloud:
      gateway:
        global-cors:
          corsConfigurations:
            '[/**]':
              allowedOrigins: "*"
              allowedMethods:
                - GET
                - POST
                - PUT
                - DELETE
                - PATCH
              allowedHeaders:
                - "Origin"
                - "Content-Type"
                - "Accept"
                - "Authorization"
                - "User-Key"
                - "Request-Tracker"
                - "Session-Tracker"
                - "X-XSRF-TOKEN"
                - "X-IBM-CLIENT-ID"
                - "Message-ID"
                - "X-IBM-CLIENT-SECRET"
        default-filters:
          - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin, RETAIN_FIRST
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 368175433889-feredabg3d7orcvdokr6nsm841fpv9ro.apps.googleusercontent.com
            client-secret: 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
            scope: email,phone,profile
            redirect-uri: http://localhost:4200/auth/callback/google
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v1/userinfo?access_token=
            user-name-attribute: sub

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
  #    #      use-redis-cache: false
  flyway:
    locations: classpath:/dev/db/migration
    #phiên bản baseline sẽ = 0 và không thực hiện bất kì thay đổi nào trong DB
    baseline-on-migrate: true
    baseline-version: 15

  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3307/ShopApp?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true}
#    url: jdbc:mysql://localhost:3306/ShopApp?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: ${MYSQL_ROOT_PASSWORD:tinbalon2}
#      ${MYSQL_ROOT_PASSWORD:}
  kafka:
    client:
      dns:
        lookup: use_dns_cache
    bootstrap-servers: ${KAFKA_BROKER_SERVER:localhost}:${KAFKA_BROKER_PORT:9092}
#        bootstrap-servers: kafka-broker-01:19092

    producer:
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

    consumer:
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"

    #    data:

    jpa:
      show-sql: true
      hibernate:
        ddl-auto: none
      properties:
        hibernate:
          dialect: org.hibernate.dialect.MySQL8Dialect
          format_sql: true
    servlet:
      multipart:
        max-file-size: 10MB
        max-request-size: 20MB
    messages:
      basename: i18n/messages
      encoding: UTF-8
      default-locale: en


  mail:
    host: smtp.gmail.com
    port: 587
    username: alosinl048@gmail.com
    password: vmlmioywbzuyymyd
    shopApp: "VNA Fruit"
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true # This forces STARTTLS
          ssl:
            trust: smtp.gmail.com
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000



api:
  prefix: /api/v1
jwt:
  shortExpiration: 600
  longExpiration: 2592000 #30days = 30 * 24 * 60 * 60
  expiration-refresh-token: 5184000 #60days = 60 * 24 * 60 * 60
  secretKey: U6v+iCW7VBBAG+UjzNjFxI7yB5mkRb6MRUiwxxPz6kE=

logging:
  config: classpath:logback-spring.xml
  file:
    name: shopapp/src/main/resources/logs/logfile.log
#  level:
    org.springframework.security: TRACE
#    org.springframework.security.web: debug
#    org.springframework.security.authentication: debug
#    org.springframework.security.access: debug

#swagger-ui custom path
springdoc:
  swagger-ui:
    path: /swagger-ui.html
  api-docs:
    path: /api-docs
  show-actuator: true

#health check
management:
  endpoint:
    health:
      show-details: always
      enabled: true

  endpoints:
    web:
      base-path: /api/v1/actuator
      exposure:
        include: "health,info"


